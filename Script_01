########################################################################################################################################################################
# Script 01 - Time-series-specific analysis.
# Pilotto et al. Meta-analysis of multidecadal biodiversity trends in Europe. Nature Communications
#
# This script includes the code for the following steps:
#    (1) compute the four studied biodiversity metrics (abundance, taxonomic richness, Simpson diversity and taxonomic turnover) for each time series and each studied year, 
#    (2) compute the monotonic trends of the four biodiversity metrics over the surveyed period,
#    (3) when necessary, combine the effect sizes of multiple time series for a given taxonomic group at the same site, with the same time span
#    (4) extract climatic data for the site,
#    (5) compute the monotonic trends of mean annual temperature and total annual precipitation over the surveyed period,
#    (6) Obtain the biogeoregion of the site,
#    (7) export the results
#
# This script must be run for each time series.
# The input data file is a table (in .csv format) with the following columns: 
# Site = site name, TimeSeries_id = unique identifier for the time series, Year = survey year, Taxon = taxon name, Density = total density or biomass or number of individual of that taxon for that year. 
#
########################################################################################################################################################################

# Load libraries: 

library(vegan)
library(codyn)
library(reshape2)
library(metafor)
library(R.utils)
library(sp)
library(raster)
library(ncdf4)
library(rgdal)
source("My_mmkh.R", local=T) # see function folder

# Read data:

DATA1_list <- read.table("BioData1.csv", h=T, sep=";") # change file name according to the time series to be analyzed


# (1) Compute biodiversity metrics -----------------------------------------------------------------

DATA1 <- dcast(DATA1_list, Year ~ Taxon, sum, value.var = "Density") # create cross table
lastTaxon <- length(DATA1)
firstTaxon <- 2

DATA1_Taxa <- subset(DATA1[,c(firstTaxon:lastTaxon)]) 
DATA1$NTaxa <- specnumber(DATA1_Taxa)  # taxonomic richness
DATA1$Simp <- diversity(DATA1_Taxa, index = "simpson") # SimpsonÂ´s taxonomic diversity
DATA1$Abund <- rowSums (DATA1_Taxa) # Total abundance
DATA1_Turnover <- turnover(DATA1_list, time.var = "Year", species.var = "Taxon", abundance.var = "Density" , metric = "total")
DATA1$Turnover <- c(0, DATA1_Turnover$total) # Turnover

# Prepare data for next steps: 

start.year <- min(DATA1$Year) # set the starting year of the time series
end.year <- max(DATA1$Year) # set the end year of the time series

# In case of missing data for one or more years, add a row with NAs:
# new.row <- head(DATA1[NA,], 1)    # creat a new row with NAs for all columns
# new.row["Year"] <- 1992   # assign the year without data
# DATA1 <- rbind(DATA1,new.row)    # attach the newly created row to the main table
# DATA1 <- DATA1[order(DATA1$Year),]   # order the years chronologically


# (2) Compute the monotonic trends for each biodiversity metric ---------------

DATA1.NTaxa <- ts(DATA1$NTaxa, start = start.year, frequency = 1) # define data as time series
acf(DATA1.NTaxa, na.action = na.pass) # check for temporal autocorrelation
pacf(DATA1.NTaxa, na.action = na.pass) # check for temporal autocorrelation
DATA1.trend.NTaxa <- My.mmkh(DATA1$NTaxa) # Modified Mann-Kendall Test For Serially Correlated Data Using Hamed and Rao (1998) Variance Correction Approach

DATA1.Simp <- ts(DATA1$Simp, start=start.year, frequency=1) # define data as time series
acf(DATA1.Simp, na.action = na.pass) # check for temporal autocorrelation
pacf(DATA1.Simp, na.action = na.pass) # check for temporal autocorrelation
DATA1.trend.Simp <- My.mmkh(DATA1$Simp) # Modified Mann-Kendall Test For Serially Correlated Data Using Hamed and Rao (1998) Variance Correction Approach

DATA1.Abund<- ts(DATA1$Abund, start=start.year, frequency=1) # define data as time series
acf(DATA1.Abund, na.action = na.pass) # check for temporal autocorrelation
pacf(DATA1.Abund, na.action = na.pass) # check for temporal autocorrelation
DATA1.trend.Abund <- My.mmkh(DATA1$Abund) # Modified Mann-Kendall Test For Serially Correlated Data Using Hamed and Rao (1998) Variance Correction Approach

DATA1.Turnover <- ts(DATA1$Turnover, start=start.year+1, frequency=1)  # define data as time series
acf(DATA1.Turnover, na.action = na.pass) # check if there is temporal autocorrelation
pacf(DATA1.Turnover, na.action = na.pass) # check if there is temporal autocorrelation
DATA1.trend.Turnover <- My.mmkh(DATA1$Turnover[-1]) # Modified Mann-Kendall Test For Serially Correlated Data Using Hamed and Rao (1998) Variance Correction Approach

# Combine results in a data frame: 

EffectSizes_biodiv_DATA1 <- data.frame(TimeSeries = "DATA1", Site = "RMO", Country = "DE", Lat = 50.187,	Lon = 9.100,	Alt = 122, # fill in with site information 
                              TaxonomicGroup = "AquaticInv", Realm = "FW", Naturalness = 3, startYear = start.year, endYear = end.year,    # fill in with site information
                              NTaxa_S = DATA1.trend.NTaxa[10], 
                              NTaxa_var = DATA1.trend.NTaxa[8], # if there is no temporal autocorrelation choose: [8]; if there is temporal autocorrelation choose [9]
                              Abund_S = DATA1.trend.Abund[10], 
                              Abund_var = DATA1.trend.Abund[8],  # if there is no temporal autocorrelation choose: [8]; if there is temporal autocorrelation choose [9]
                              Simp_S = DATA1.trend.Simp[10],  
                              Simp_var = DATA1.trend.Simp[9],  # if there is no temporal autocorrelation choose: [8]; if there is temporal autocorrelation choose [9]
                              Turn_S = DATA1.trend.Turnover[10],  
                              Turn_var = DATA1.trend.Turnover[8])  # if there is no temporal autocorrelation choose: [8]; if there is temporal autocorrelation choose [9]


# (3) Combine replicated time series [to be run only when necessary] ---------------------------------------
# If multiple time series are available for a given taxonomic group at the same site, with the same time span, e.g. from multiple transects or plots with multiple traps,
# to avoid pseudoreplication, we combine those time series using meta-analysis mixed models and extract the cumulative effect sizes and their variances.
# The script below show the procedure for combining 3 time series. 

# Run the script above for each of the 3 time series to be combined, to obtain the following objects:
EffectSizes_biodiv_DATA1
EffectSizes_biodiv_DATA2
EffectSizes_biodiv_DATA3

# Merge the three objects in a dataframe:
EffectSizes_biodiv_DATA1_3 <- rbind(EffectSizes_biodiv_DATA1, EffectSizes_biodiv_DATA2, EffectSizes_biodiv_DATA3)

# run meta-analysis mixed models
Combined.trend.NTaxa <- rma(NTaxa_S, NTaxa_var, data = EffectSizes_biodiv_DATA1_3)
Combined.trend.Simp <- rma(Simp_S, Simp_var, data = EffectSizes_biodiv_DATA1_3)
Combined.trend.Abund <- rma(Abund_S, Abund_var, data = EffectSizes_biodiv_DATA1_3)
Combined.trend.Turn <- rma(Turn_S, Turn_var, data = EffectSizes_biodiv_DATA1_3)

# Combine results in a data frame: 

EffectSizes_biodiv_Combined_DATA1_3 <- data.frame(TimeSeries = "Combined_DATA1_3", Site = "Site2", Country = "DE", Lat = 51.7614,	Lon = 	9.5781,	Alt = 504, # fill in with site information 
                                       TaxonomicGroup = "Plants", Realm = "TE", Naturalness = 3, startYear = start.year, endYear = end.year,     # fill in with site information
                                       NTaxa_S = Combined.trend.NTaxa$beta, 
                                       NTaxa_var = Combined.trend.NTaxa$vb[1], 
                                       Abund_S = Combined.trend.Abund$beta, 
                                       Abund_var = Combined.trend.Abund$vb[1],  
                                       Simp_S = Combined.trend.Simp$beta,  
                                       Simp_var = Combined.trend.Simp$vb[1], 
                                       Turn_S = Combined.trend.Turn$beta,  
                                       Turn_var = Combined.trend.Turn$vb[1])  


# (4) Gather climatic data ----------------------------------------------------
# To run the following code, it is necessary to download the daily mean temperature and daily total precipitation data 
# from the Gridded observational dataset for precipitation, temperature and sea level pressure in Europe, 
# available at https://www.ecad.eu/download/ensembles/download.php

# Set coordinates of target point:

lon <- 	EffectSizes_biodiv_DATA1$Lon  # longitude of the target site					
lat <-	EffectSizes_biodiv_DATA1$Lat	# latitude  of the target site 	

# Set start and end year of the biotic time series at the site:

start.year <- EffectSizes_biodiv_DATA1$startYear  # set the starting year of the time series
end.year <- EffectSizes_biodiv_DATA1$endYear  # set the end year of the time series

# Extract .gz compressed files:

R.utils::gunzip("tg_0.25deg_reg_v17.0.nc.gz")
R.utils::gunzip("rr_0.25deg_reg_v17.0.nc.gz")

# Extract mean daily temperature at the site:

ncin <- nc_open("tg_0.25deg_reg_v17.0.nc" )
t <- ncvar_get(ncin,"time")
tunits <- ncatt_get(ncin,"time","units")
nt <- dim(t)
obsoutput <- ncvar_get(ncin, start= c(which.min(abs(ncin$dim$longitude$vals - lon)), # look for closest longitude
                                      which.min(abs(ncin$dim$latitude$vals - lat)),  # look for closest latitude
                                      1),
                       count=c(1,1,-1))
DataMeanT <- data.frame(DateN= t, MeanDailyT = obsoutput)
nc_close(ncin)
#check data
head(DataMeanT)
summary(DataMeanT)

# Extract daily total precipitation at the site:

ncinP <- nc_open("rr_0.25deg_reg_v17.0.nc" )
t <- ncvar_get(ncinP,"time")
tunits <- ncatt_get(ncinP,"time","units")
obsoutput_P <- ncvar_get(ncinP, 
                         start= c(which.min(abs(ncinP$dim$longitude$vals - lon)), # look for closest long
                                  which.min(abs(ncinP$dim$latitude$vals - lat)),  # look for closest lat
                                  1),
                         count=c(1,1,-1))
DataP <- data.frame(DateN= t, MeanDailyP = obsoutput_P)
nc_close(ncinP)
#check data
head(DataP)
summary(DataP)

# Compute mean annual temperature and total annual precipitation:

Data <- merge(x = DataMeanT, y = DataP, by = "DateN")
Data$Date <- as.Date(Data$DateN, origin="1950-01-01")
Data$Year <- format(Data$Date,"%Y")
Data$Month <- format(Data$Date,"%m")
head(Data)
Data$YearMonth <- format(Data$Date, format="%Y-%b")

AnnualMeanT <- aggregate(MeanDailyT ~ Year,data = Data, FUN = mean,na.action = na.pass)
AnnualTotP <- data.frame(aggregate(MeanDailyP ~ Year,data = Data, FUN = sum,na.action = na.pass))
Climatic_data_annual <- merge(AnnualMeanT, AnnualTotP, by = "Year", na.action = na.pass)
names(Climatic_data_annual) <- c("Year","T_AnnualMean", "P_AnnualTotal")

# Subset the range of years for which there are biotic data for the site:
Climatic_data <- Climatic_data_annual[Climatic_data_annual$Year >= start.year & Climatic_data_annual$Year <= end.year, ]


# (5) Compute monotonic trends of climatic data -------------------------------

PTot <- ts(Climatic_data$P_AnnualTotal, start=start.year, frequency=1) # define data as time series
acf(PTot, na.action = na.pass) # check for temporal autocorrelation
pacf(PTot, na.action = na.pass) # check for temporal autocorrelation
Trend.PTot <- My.mmkh(Climatic_data$P_AnnualTotal) #Modified Mann-Kendall Test For Serially Correlated Data Using Hamed and Rao (1998) Variance Correction Approach

TMean <- ts(Climatic_data$T_AnnualMean, start=start.year, frequency=1) # define data as time series
acf(TMean) # check for temporal autocorrelation
pacf(TMean) # check for temporal autocorrelation
Trend.TMean <- My.mmkh(Climatic_data$T_AnnualMean) #Modified Mann-Kendall Test For Serially Correlated Data Using Hamed and Rao (1998) Variance Correction Approach


# If the time series is from an aquatic ecosystem and water temperature at the site is available, read the data (table with 2 colums: Year = surveyed year, T_AnnualMean = mean water temperature):
# Water_temperature <- read.table("WaterT_Site1.csv",h=T, sep=";") # change file name according to the time series to be analyzed
# then, run the 4 rows of the code above to compute the trend of TMean using "Water_temperature" instead of "Climatic_data"

# Combine results in a data frame: 

EffectSizes_climate_Site1 <- data.frame(Site = "RMO",
                                        TMean_S = Trend.TMean[10], 
                                        TMean_var = Trend.TMean[8], # if there is no temporal autocorrelation choose: [8]; if there is temporal autocorrelation choose [9]
                                        PTot_S = Trend.PTot[10], 
                                        PTot_var = Trend.PTot[8])  # if there is no temporal autocorrelation choose: [8]; if there is temporal autocorrelation choose [9]



# Merge biotic and climatic trends:

Effect_size_bio_climate <- merge(EffectSizes_biodiv_DATA1, EffectSizes_climate_Site1, by = "Site")                                               

# If replicated time series were combined, run this following line instead of the previous one: 
# Effect_size_bio_climate <- merge(EffectSizes_biodiv_Combined_DATA1_3, EffectSizes_climate_Site1, by = "Site")                                               


# (6) Gather siteÂ´s biogeoregion ------------------------------------------------------------

# For continental sites: 
# To run this code it is necessary to download the Biogeoregion shapefile from:
# https://www.eea.europa.eu/data-and-maps/data/biogeographical-regions-europe-3#tab-gis-data

# Set projections: 
crs.geo <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")  # geographical, datum WGS84
crs.laea <- CRS("+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs")  # Lambert Azimuthal Equal Area

# Read shapefile and define projection:
shapeER <- readOGR(dsn = ".", layer = "BiogeoRegions2016")
proj4string(shapeER) <- crs.laea 

# Define projection of the target site and re-project as laea: 
Site <- Effect_size_bio_climate
coordinates(Site) <- c("Lon", "Lat") 
proj4string(Site) <- crs.geo 
Site.laea <- spTransform(Site, crs.laea)  # spTransform makes the projection

# Extract Biogeoregion
Region <- extract(shapeER, Site.laea)$code

# For marine sites: 
# To run this code it is necessary to download the marine ecoregion shapefile from:
# http://maps.tnc.org/gis_data.html

# Read shapefile and define projection:
MARshape <- readOGR(dsn = ".", layer = "meow_ecos")
proj4string(MARshape) <- crs.geo 

# Define projection of the target site and re-project as laea:
Site <- Effect_size_bio_climate
coordinates(Site) <- c("Lon", "Lat") 
proj4string(Site) <- crs.geo 

# Extract Biogeoregion
Region <- extract(MARshape, Site)$ECOREGION
Region


# Add biogeoregion to the main table:

Effect_size_bio_climate$Biogeoregion <- Region

# (7) Export results -------------------------------------------------------------

write.table(Effect_size_bio_climate, file = "Trends_bio_climate_TimeSeries1.csv", row.names = FALSE, col.names = TRUE, sep = ";") # change file name according to the analysed time series
